// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id
  username              String          @unique
  avatar                String?
  cover                 String?
  name                  String?
  surname               String?
  description           String?
  city                  String?
  school                String?
  work                  String?
  website               String?
  posts                 Post[]
  likes                 Like[]
  comments              Comment[]
  followers             Follower[]      @relation("UserFollowers")
  followings            Follower[]      @relation("UserFollowings")
  followRequestSent     FollowRequest[] @relation("FollowRequestSent")
  followRequestRecieved FollowRequest[] @relation("FollowRequestRecieved")
  blocksSent            BlockRequest[]  @relation("BlocksSent")
  blocksRecieved        BlockRequest[]  @relation("BlocksRecieved")
  stories               Story[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

model Post {
  id          Int       @id @default(autoincrement())
  description String
  img         String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  text      String?
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follower {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("FollowRequestSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  reciever   User     @relation("FollowRequestRecieved", fields: [recieverId], references: [id], onDelete: Cascade)
  recieverId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([senderId, recieverId])
}

model BlockRequest {
  id        Int      @id @default(autoincrement())
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("BlocksRecieved", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  media     String
  img       String?
  createdAt DateTime @default(now())
  expiresAt DateTime
}
